apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    dataBinding {
        enabled true
    }
}

dependencies {
    def room_version = "2.2.5"
    def lifecycle_version = "2.2.0"
    def work_manager = "2.3.4"
    api "androidx.appcompat:appcompat:1.1.0"
    //根据google jetpack KTX 优化使用
    //lifecycle 包含
    api "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    //Android KTX 是包含在 Android Jetpack 及其他 Android 库中的一组 Kotlin 扩展程序
    //https://developer.android.google.cn/kotlin/ktx
    api 'androidx.core:core-ktx:1.3.0'
    /*
     *支持fragment lambda  事务表达 by关联viewmodel  by viewModels<MyViewModel>()
     *  by activityViewModels<MyViewModel>()
    */
    api "androidx.fragment:fragment-ktx:1.2.5"
    /*
    * Lifecycle 被销毁时取消。您可以使用 lifecycle.coroutineScope 或
    * lifecycleOwner.lifecycleScope 属性访问 Lifecycle 的 CoroutineScope。
    */
    api "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    /*
    livedata  您可以使用 liveData 构建器函数异步调用 loadUser()，然后使用 emit() 来发出结果：
    val fun getUsersLiveData() : LiveData<List<User>> {
    val users: Flowable<List<User>> = dao.findUsers()
    return LiveDataReactiveStreams.fromPublisher(users)
    }
    */
    api "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    /*
       room 数据库  您可以使用 liveData 构建器函数异步调用 loadUser()，然后使用 emit() 来发出结果：
       第一个示例使用 suspend 函数返回 User 对象列表，而第二个示例利用 Kotlin 的 Flow 异步返回 User 列表。
       注意，使用 Flow 时，您还会收到有关您正在查询的表中任何更改的通知。
       @Query("SELECT * FROM Users")
        suspend fun getUsers(): List<User>
        @Query("SELECT * FROM Users")
        fun getUsers(): Flow<List<User>>
     */
    api "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    api "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    api "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    api "androidx.room:room-guava:$room_version"

    /*
    viewModel 中协程操作
    *viewModelScope.launch  {
            remoteApi.slowFetch()
            ...
        }
    */
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    /*
    CoroutineWorker workmanager 协程操作
    * */
    api "androidx.work:work-runtime-ktx:$work_manager"
    // optional - RxJava2 support
    api "androidx.work:work-rxjava2:$work_manager"
    // optional - GCMNetworkManager support
    api "androidx.work:work-gcm:$work_manager"


}
